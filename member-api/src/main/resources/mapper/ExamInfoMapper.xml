<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huaxin.member.mapper.ExamInfoMapper">

    <select id="findList" parameterType="map" resultType="map">
        select
            e.id,
            e.library_id as libraryId,
            e.library_type as libraryType,
            e.answer,
            e.confidence_value as confidenceValue,
            e.user_id as userId,
            e.manage_id as manageId,
            e.edition
        from exam_info e

        where 1=1

        <if test="manageId!=null and manageId!=''">
            and e.manage_id  like concat('%',#{manageId},'%')
        </if>

        <if test="libraryType!=null and libraryType!=''">
            and e.library_type  = #{libraryType}
        </if>

        <if test="userId!=null and userId!=''">
            and e.user_id  = #{userId}
        </if>

        <if test="libraryId!=null and libraryId!=''">
            and e.library_id  = #{libraryId}
        </if>

        order by e.create_time desc
    </select>



    <select id="findListOfRationQuestion" parameterType="map" resultType="map">
        select
        q.id,
        q.title,
        q.manage_id as manageId,
        q.ration_type as rationType,
        q.ration_remark as rationRemark,
        q.edition,
        q.ration_data as rationData,
        q.ration_code as rationCode

        from ration_question_library q

        where q.is_delete <![CDATA[ <> ]]> 1


        <if test="libraryId!=null and libraryId!=''">
            and q.id = #{libraryId}
        </if>

        <if test="manageId!=null and manageId!=''">
            and q.manage_id = #{manageId}
        </if>

        <if test="rationType!=null and rationType!=''">
            and q.ration_type = #{rationType}
        </if>

        <if test="edition!=null and edition!=''">
            and q.edition = #{edition}
        </if>


        order by q.create_time
    </select>

    <select id="findListOfRationConfidence" parameterType="map" resultType="map">
        select
          id,
          title,
          ration_id as rationId,
        <if test="confidenceValue!=null and confidenceValue!=''">
            case when fraction = #{confidenceValue} then 0 else 1 end is_check,
        </if>
        <if test="confidenceValue == null or confidenceValue==''">
            1 is_check,
        </if>
          fraction


        from ration_confidence_info

        where ration_id = #{rationId}

        order by create_time
    </select>

    <select id="findListOfQualitative" parameterType="map" resultType="map">
        select
            q.id, q.title,q.manage_type as manageId,q.questionnaire_type as questionnaireType,
            q.answer_ofA as answerOfA,
            q.confidence_level_ofA as confidenceLevelOfA,
            q.edition,
            q.answer_ofB as answerOfB,
            q.confidence_level_ofB as confidenceLevelOfB
        from qualitative_question_library q


        where q.is_delete <![CDATA[ <> ]]> 1

        <if test="libraryId!=null and libraryId!=''">
            and q.id = #{libraryId}
        </if>

        <if test="manageId!=null and manageId!=''">
            and q.manage_type = #{manageId}
        </if>

        <if test="questionnaireType!=null and questionnaireType!=''">
            and q.questionnaire_type = #{questionnaireType}
        </if>

        <if test="edition!=null and edition!=''">
            and q.edition = #{edition}
        </if>



        order by q.create_time
    </select>


    <insert id="saveExamInfo" parameterType="java.util.List">
        insert into exam_info(
            id,
            library_id,
            library_type,
            answer,
            confidence_value,
            user_id,
            edition,
            manage_id
        )
        values
        <foreach collection="list" item="examInfo" index="index" separator=",">
            (
            #{examInfo.id},
            #{examInfo.libraryId},
            #{examInfo.libraryType},
            #{examInfo.answer},
            #{examInfo.confidenceValue},
            #{examInfo.userId},
            #{examInfo.edition},
            #{examInfo.manageId}
            )
        </foreach>

    </insert>


    <insert id="saveExamInfoId" parameterType="com.huaxin.member.model.ExamInfo" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into exam_info(
            id,
            library_id,
            library_type,
            answer,
            confidence_value,
            user_id,
            edition,
            manage_id
        )
        values (
            #{id},
            #{libraryId},
            #{libraryType},
            #{answer},
            #{confidenceValue},
            #{userId},
            #{edition},
            #{manageId}

        );
    </insert>

    <update id="updateExamInfo" parameterType="com.huaxin.member.model.ExamInfo">
        update exam_info set
        <if test="libraryId!=null">
            library_id = #{libraryId},
        </if>
        <if test="libraryType!=null">
            library_type = #{libraryType},
        </if>
        <if test="answer!=null">
            answer = #{answer},
        </if>
        <if test="confidenceValue!=null">
            confidence_value = #{confidenceValue},
        </if>
        <if test="userId!=null">
            user_id = #{userId},
        </if>
        <if test="manageId!=null">
            manage_id = #{manageId},
        </if>
        create_time = now()

        where id = #{id}
    </update>


</mapper>